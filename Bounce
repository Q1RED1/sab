-- EVRS Anti Hit Script - Fixed Version
-- Bounces up/down rapidly while moving left/right until player within 20 studs
-- Then moves across nearest wall to other side of base

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Anti-Hit System
local AntiHitSystem = {
    isActive = false,
    currentTween = nil,
    connections = {},
    
    -- Base settings (40x40x20 - length x width x height)
    baseCenter = Vector3.new(0, 10, 0),
    baseLength = 40, -- X-axis
    baseWidth = 40,  -- Z-axis
    baseHeight = 20, -- Y-axis
    
    -- Movement settings
    bounceHeight = 8, -- How high to bounce (within base height)
    bounceSpeed = 0.3, -- Speed of up/down bouncing
    horizontalSpeed = 1.5, -- Speed of left/right movement
    detectionDistance = 20, -- Distance to detect nearby players
    
    -- Current movement state
    currentPosition = Vector3.new(0, 0, 0),
    isMovingUp = true,
    horizontalDirection = 1, -- 1 for right, -1 for left
    wallCrossing = false,
    
    -- Wall positions (relative to base center) - adjusted for 40x40 base
    walls = {
        left = Vector3.new(-20, 15, 0),   -- Left wall at X=-20
        right = Vector3.new(20, 15, 0),   -- Right wall at X=20
        front = Vector3.new(0, 15, -20),  -- Front wall at Z=-20
        back = Vector3.new(0, 15, 20)     -- Back wall at Z=20
    }
}

-- Create GUI
local function createGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "EVRSAntiHitGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 280, 0, 160)
    mainFrame.Position = UDim2.new(0, 10, 0, 10)
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    -- Corner radius
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame
    
    -- Gradient
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 30)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(15, 15, 15))
    })
    gradient.Rotation = 45
    gradient.Parent = mainFrame
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, 30)
    title.Position = UDim2.new(0, 0, 0, 5)
    title.BackgroundTransparency = 1
    title.Text = "EVRS Anti Hit Script - Fixed"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    title.Font = Enum.Font.GothamBold
    title.Parent = mainFrame
    
    -- Status Label
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "StatusLabel"
    statusLabel.Size = UDim2.new(1, -20, 0, 20)
    statusLabel.Position = UDim2.new(0, 10, 0, 35)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "Status: Inactive"
    statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.Parent = mainFrame
    
    -- Distance Label
    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Name = "DistanceLabel"
    distanceLabel.Size = UDim2.new(1, -20, 0, 15)
    distanceLabel.Position = UDim2.new(0, 10, 0, 55)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.Text = "Nearest Player: N/A"
    distanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    distanceLabel.TextScaled = true
    distanceLabel.Font = Enum.Font.Gotham
    distanceLabel.TextXAlignment = Enum.TextXAlignment.Left
    distanceLabel.Parent = mainFrame
    
    -- Mode Label
    local modeLabel = Instance.new("TextLabel")
    modeLabel.Name = "ModeLabel"
    modeLabel.Size = UDim2.new(1, -20, 0, 15)
    modeLabel.Position = UDim2.new(0, 10, 0, 75)
    modeLabel.BackgroundTransparency = 1
    modeLabel.Text = "Mode: Bouncing"
    modeLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
    modeLabel.TextScaled = true
    modeLabel.Font = Enum.Font.Gotham
    modeLabel.TextXAlignment = Enum.TextXAlignment.Left
    modeLabel.Parent = mainFrame
    
    -- Start Button
    local startButton = Instance.new("TextButton")
    startButton.Name = "StartButton"
    startButton.Size = UDim2.new(0, 120, 0, 35)
    startButton.Position = UDim2.new(0, 15, 0, 110)
    startButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
    startButton.Text = "Start"
    startButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    startButton.TextScaled = true
    startButton.Font = Enum.Font.GothamBold
    startButton.Parent = mainFrame
    
    local startCorner = Instance.new("UICorner")
    startCorner.CornerRadius = UDim.new(0, 5)
    startCorner.Parent = startButton
    
    -- Stop Button
    local stopButton = Instance.new("TextButton")
    stopButton.Name = "StopButton"
    stopButton.Size = UDim2.new(0, 120, 0, 35)
    stopButton.Position = UDim2.new(0, 145, 0, 110)
    stopButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
    stopButton.Text = "Stop"
    stopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    stopButton.TextScaled = true
    stopButton.Font = Enum.Font.GothamBold
    stopButton.Parent = mainFrame
    
    local stopCorner = Instance.new("UICorner")
    stopCorner.CornerRadius = UDim.new(0, 5)
    stopCorner.Parent = stopButton
    
    -- Make GUI draggable
    local dragStart = nil
    local startPos = nil
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragStart = input.Position
            startPos = mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragStart = nil
                end
            end)
        end
    end)
    
    mainFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if dragStart then
                updateInput(input)
            end
        end
    end)
    
    return screenGui, startButton, stopButton, statusLabel, distanceLabel, modeLabel
end

-- Find nearest player
function AntiHitSystem:findNearestPlayer()
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return nil, math.huge end
    
    local rootPart = character.HumanoidRootPart
    local myPosition = rootPart.Position
    
    local nearestPlayer = nil
    local nearestDistance = math.huge
    
    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (otherPlayer.Character.HumanoidRootPart.Position - myPosition).Magnitude
            if distance < nearestDistance then
                nearestDistance = distance
                nearestPlayer = otherPlayer
            end
        end
    end
    
    return nearestPlayer, nearestDistance
end

-- Get nearest wall to cross to
function AntiHitSystem:getNearestWall()
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return self.walls.right end
    
    local rootPart = character.HumanoidRootPart
    local myPosition = rootPart.Position
    
    local nearestWall = nil
    local nearestDistance = math.huge
    
    for wallName, wallPos in pairs(self.walls) do
        local worldWallPos = self.baseCenter + wallPos
        local distance = (worldWallPos - myPosition).Magnitude
        if distance < nearestDistance then
            nearestDistance = distance
            nearestWall = wallPos
        end
    end
    
    return nearestWall or self.walls.right
end

-- Get opposite wall position
function AntiHitSystem:getOppositeWall(currentWall)
    for wallName, wallPos in pairs(self.walls) do
        if wallPos == currentWall then
            if wallName == "left" then return self.walls.right
            elseif wallName == "right" then return self.walls.left
            elseif wallName == "front" then return self.walls.back
            elseif wallName == "back" then return self.walls.front
            end
        end
    end
    return self.walls.right -- Default fallback
end

-- Cross to opposite wall
function AntiHitSystem:crossToOppositeWall(rootPart, bodyPosition)
    if self.wallCrossing then return end
    
    self.wallCrossing = true
    print("Player within 20 studs! Crossing to opposite wall...")
    
    -- Get nearest wall and its opposite
    local nearestWall = self:getNearestWall()
    local oppositeWall = self:getOppositeWall(nearestWall)
    
    -- Calculate target position
    local targetPosition = self.baseCenter + oppositeWall
    
    -- Stop current movement
    if self.currentTween then
        self.currentTween:Cancel()
        self.currentTween = nil
    end
    
    -- Create crossing tween
    local crossingInfo = TweenInfo.new(
        2.0, -- 2 seconds to cross
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out,
        0,
        false,
        0
    )
    
    self.currentTween = TweenService:Create(bodyPosition, crossingInfo, {
        Position = targetPosition
    })
    
    self.currentTween:Play()
    
    -- After crossing, resume bouncing
    local connection
    connection = self.currentTween.Completed:Connect(function()
        connection:Disconnect()
        self.wallCrossing = false
        self.currentPosition = targetPosition
        
        -- Resume bouncing pattern
        if self.isActive then
            self:startBouncing(rootPart, bodyPosition)
        end
    end)
    
    table.insert(self.connections, connection)
end

-- Start bouncing movement
function AntiHitSystem:startBouncing(rootPart, bodyPosition)
    if not self.isActive or self.wallCrossing then return end
    
    local bounceConnection
    bounceConnection = RunService.Heartbeat:Connect(function()
        if not self.isActive or self.wallCrossing then
            bounceConnection:Disconnect()
            return
        end
        
        local character = player.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            bounceConnection:Disconnect()
            return
        end
        
        -- Check for nearby players
        local nearestPlayer, distance = self:findNearestPlayer()
        if distance <= self.detectionDistance then
            bounceConnection:Disconnect()
            self:crossToOppositeWall(rootPart, bodyPosition)
            return
        end
        
        -- Update current position
        local currentPos = rootPart.Position
        
        -- Vertical bouncing
        local verticalOffset = 0
        if self.isMovingUp then
            verticalOffset = self.bounceHeight
        else
            verticalOffset = -self.bounceHeight
        end
        
        -- Horizontal movement (adjusted for 40x40 base)
        local horizontalOffset = self.horizontalDirection * 15 -- Move 15 studs left/right within base
        
        -- Calculate new position (keeping within base bounds)
        local newPosition = Vector3.new(
            self.baseCenter.X + horizontalOffset,
            self.baseCenter.Y + verticalOffset,
            self.baseCenter.Z
        )
        
        -- Update body position
        bodyPosition.Position = newPosition
        
        -- Toggle vertical direction every few frames
        if tick() % (self.bounceSpeed * 2) < 0.03 then
            self.isMovingUp = not self.isMovingUp
        end
        
        -- Change horizontal direction when hitting boundaries (40x40 base)
        if math.abs(newPosition.X - self.baseCenter.X) > (self.baseLength/2 - 5) then
            self.horizontalDirection = -self.horizontalDirection
        end
        
        self.currentPosition = newPosition
    end)
    
    table.insert(self.connections, bounceConnection)
end

-- Start anti-hit system
function AntiHitSystem:start()
    if self.isActive then return end
    
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        warn("Character not found!")
        return
    end
    
    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character.HumanoidRootPart
    
    self.isActive = true
    self.wallCrossing = false
    
    -- Disable player controls
    if humanoid then
        humanoid.PlatformStand = true
        humanoid.WalkSpeed = 0
        humanoid.JumpPower = 0
    end
    
    -- Create BodyPosition for smooth movement
    local bodyPosition = Instance.new("BodyPosition")
    bodyPosition.MaxForce = Vector3.new(4000, 4000, 4000)
    bodyPosition.P = 3000
    bodyPosition.D = 500
    bodyPosition.Position = rootPart.Position
    bodyPosition.Parent = rootPart
    
    -- Start bouncing
    self:startBouncing(rootPart, bodyPosition)
    
    print("EVRS Anti Hit activated with new bouncing pattern!")
end

-- Stop anti-hit system
function AntiHitSystem:stop()
    if not self.isActive then return end
    
    self.isActive = false
    self.wallCrossing = false
    
    -- Stop current tween
    if self.currentTween then
        self.currentTween:Cancel()
        self.currentTween = nil
    end
    
    -- Disconnect all connections
    for _, connection in pairs(self.connections) do
        connection:Disconnect()
    end
    self.connections = {}
    
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        
        -- Restore player controls
        if humanoid then
            humanoid.PlatformStand = false
            humanoid.WalkSpeed = 16
            humanoid.JumpPower = 50
        end
        
        -- Remove BodyPosition
        if rootPart then
            local bodyPosition = rootPart:FindFirstChild("BodyPosition")
            if bodyPosition then
                bodyPosition:Destroy()
            end
        end
    end
    
    print("EVRS Anti Hit deactivated!")
end

-- Main execution
local function main()
    -- Create GUI
    local gui, startButton, stopButton, statusLabel, distanceLabel, modeLabel = createGUI()
    
    -- Update status
    local function updateStatus()
        if AntiHitSystem.isActive then
            statusLabel.Text = "Status: Active"
            statusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
        else
            statusLabel.Text = "Status: Inactive"
            statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
        end
        
        -- Update distance to nearest player
        local nearestPlayer, distance = AntiHitSystem:findNearestPlayer()
        if nearestPlayer then
            distanceLabel.Text = string.format("Nearest Player: %.1f studs", distance)
            if distance <= AntiHitSystem.detectionDistance then
                distanceLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
            else
                distanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            end
        else
            distanceLabel.Text = "Nearest Player: N/A"
            distanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        end
        
        -- Update mode
        if AntiHitSystem.wallCrossing then
            modeLabel.Text = "Mode: Wall Crossing"
            modeLabel.TextColor3 = Color3.fromRGB(255, 255, 100)
        else
            modeLabel.Text = "Mode: Bouncing"
            modeLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
        end
    end
    
    -- Status update loop
    local statusConnection
    statusConnection = RunService.Heartbeat:Connect(function()
        updateStatus()
    end)
    
    -- Button connections
    startButton.MouseButton1Click:Connect(function()
        AntiHitSystem:start()
        updateStatus()
    end)
    
    stopButton.MouseButton1Click:Connect(function()
        AntiHitSystem:stop()
        updateStatus()
    end)
    
    -- Add button hover effects
    startButton.MouseEnter:Connect(function()
        startButton.BackgroundColor3 = Color3.fromRGB(0, 180, 0)
    end)
    
    startButton.MouseLeave:Connect(function()
        startButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
    end)
    
    stopButton.MouseEnter:Connect(function()
        stopButton.BackgroundColor3 = Color3.fromRGB(180, 0, 0)
    end)
    
    stopButton.MouseLeave:Connect(function()
        stopButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
    end)
    
    -- Cleanup when player leaves
    player.AncestryChanged:Connect(function()
        if not player.Parent then
            AntiHitSystem:stop()
        end
    end)
    
    -- Character respawn handling
    player.CharacterAdded:Connect(function()
        if AntiHitSystem.isActive then
            wait(1)
            AntiHitSystem:stop()
            AntiHitSystem:start()
        end
    end)
    
    updateStatus()
    print("EVRS Anti Hit Script (Fixed Version) loaded successfully!")
end

-- Execute
main()
