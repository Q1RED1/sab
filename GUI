-- Auto Farm GUI for Game
-- Features: Auto farm with base detection, brainrot collection, and mobile support

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- GUI Configuration
local GUI = {}
local State = {
    autoFarmEnabled = false,
    guiVisible = true,
    isMobile = UserInputService.TouchEnabled,
    baseUnlockTimer = 0,
    isCurrentlyFarming = false,
    lastBaseUnlockTime = 0
}

-- Create Main GUI
function GUI:CreateMain()
    -- Remove existing GUI if it exists
    if CoreGui:FindFirstChild("AutoFarmGUI") then
        CoreGui:FindFirstChild("AutoFarmGUI"):Destroy()
    end
    
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AutoFarmGUI"
    screenGui.Parent = CoreGui
    screenGui.ResetOnSpawn = false
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 300, 0, 200)
    mainFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
    mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    -- Add corner radius
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = mainFrame
    
    -- Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    
    -- Title Text
    local titleText = Instance.new("TextLabel")
    titleText.Size = UDim2.new(1, -100, 1, 0)
    titleText.Position = UDim2.new(0, 10, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = "Auto Farm GUI"
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.TextScaled = true
    titleText.Font = Enum.Font.GothamBold
    titleText.Parent = titleBar
    
    -- Mobile Toggle Button (EVR)
    if State.isMobile then
        local evrButton = Instance.new("TextButton")
        evrButton.Size = UDim2.new(0, 50, 0, 30)
        evrButton.Position = UDim2.new(1, -60, 0, 5)
        evrButton.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
        evrButton.Text = "EVR"
        evrButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        evrButton.TextScaled = true
        evrButton.Font = Enum.Font.GothamBold
        evrButton.BorderSizePixel = 0
        evrButton.Parent = titleBar
        
        local evrCorner = Instance.new("UICorner")
        evrCorner.CornerRadius = UDim.new(0, 8)
        evrCorner.Parent = evrButton
        
        -- EVR Button functionality
        evrButton.MouseButton1Click:Connect(function()
            State.guiVisible = not State.guiVisible
            mainFrame.Visible = State.guiVisible
        end)
    end
    
    -- Auto Farm Toggle Button
    local autoFarmButton = Instance.new("TextButton")
    autoFarmButton.Size = UDim2.new(0, 120, 0, 40)
    autoFarmButton.Position = UDim2.new(0, 15, 0, 60)
    autoFarmButton.BackgroundColor3 = Color3.fromRGB(85, 170, 85)
    autoFarmButton.Text = "Auto Farm: OFF"
    autoFarmButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    autoFarmButton.TextScaled = true
    autoFarmButton.Font = Enum.Font.Gotham
    autoFarmButton.BorderSizePixel = 0
    autoFarmButton.Parent = mainFrame
    
    local farmCorner = Instance.new("UICorner")
    farmCorner.CornerRadius = UDim.new(0, 8)
    farmCorner.Parent = autoFarmButton
    
    -- Bounce Button
    local bounceButton = Instance.new("TextButton")
    bounceButton.Size = UDim2.new(0, 120, 0, 40)
    bounceButton.Position = UDim2.new(0, 165, 0, 60)
    bounceButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
    bounceButton.Text = "Bounce"
    bounceButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    bounceButton.TextScaled = true
    bounceButton.Font = Enum.Font.Gotham
    bounceButton.BorderSizePixel = 0
    bounceButton.Parent = mainFrame
    
    local bounceCorner = Instance.new("UICorner")
    bounceCorner.CornerRadius = UDim.new(0, 8)
    bounceCorner.Parent = bounceButton
    
    -- Bounce Button Click
    bounceButton.MouseButton1Click:Connect(function()
        bounceButton.Text = "Loading..."
        bounceButton.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
        
        spawn(function()
            -- Load and execute the bounce script
            local success, result = pcall(function()
                local bounceScript = game:HttpGet("https://raw.githubusercontent.com/Q1RED1/sab/refs/heads/main/Bounce")
                loadstring(bounceScript)()
            end)
            
            if success then
                bounceButton.Text = "Bounce âœ“"
                bounceButton.BackgroundColor3 = Color3.fromRGB(85, 170, 85)
                statusLabel.Text = "Status: Bounce script loaded!"
            else
                bounceButton.Text = "Error"
                bounceButton.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
                statusLabel.Text = "Status: Failed to load bounce script"
                print("Bounce script error:", result)
            end
            
            -- Reset button after 2 seconds
            wait(2)
            bounceButton.Text = "Bounce"
            bounceButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        end)
    end)
    
    -- Status Label
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -20, 0, 30)
    statusLabel.Position = UDim2.new(0, 10, 0, 110)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "Status: Idle"
    statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.Parent = mainFrame
    
    -- Timer Label
    local timerLabel = Instance.new("TextLabel")
    timerLabel.Size = UDim2.new(1, -20, 0, 25)
    timerLabel.Position = UDim2.new(0, 10, 0, 140)
    timerLabel.BackgroundTransparency = 1
    timerLabel.Text = "Next farm in: --"
    timerLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
    timerLabel.TextScaled = true
    timerLabel.Font = Enum.Font.Gotham
    timerLabel.Parent = mainFrame
    
    -- Auto Farm Button Click
    autoFarmButton.MouseButton1Click:Connect(function()
        State.autoFarmEnabled = not State.autoFarmEnabled
        
        if State.autoFarmEnabled then
            autoFarmButton.Text = "Auto Farm: ON"
            autoFarmButton.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
            statusLabel.Text = "Status: Monitoring bases..."
            self:StartAutoFarm()
        else
            autoFarmButton.Text = "Auto Farm: OFF"
            autoFarmButton.BackgroundColor3 = Color3.fromRGB(85, 170, 85)
            statusLabel.Text = "Status: Idle"
            timerLabel.Text = "Next farm in: --"
            self:StopAutoFarm()
        end
    end)
    
    -- Make GUI draggable (desktop only)
    if not State.isMobile then
        local dragging = false
        local dragStart = nil
        local startPos = nil
        
        titleBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                dragStart = input.Position
                startPos = mainFrame.Position
            end
        end)
        
        titleBar.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local delta = input.Position - dragStart
                mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end)
        
        titleBar.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
    end
    
    -- Store references
    self.MainFrame = mainFrame
    self.StatusLabel = statusLabel
    self.TimerLabel = timerLabel
    self.AutoFarmButton = autoFarmButton
    
    return screenGui
end

-- Auto Farm Functions
function GUI:StartAutoFarm()
    if self.FarmConnection then
        self.FarmConnection:Disconnect()
    end
    
    self.FarmConnection = RunService.Heartbeat:Connect(function()
        if State.autoFarmEnabled then
            self:UpdateFarmStatus()
            self:CheckForBaseUnlock()
        end
    end)
end

function GUI:StopAutoFarm()
    if self.FarmConnection then
        self.FarmConnection:Disconnect()
        self.FarmConnection = nil
    end
    State.isCurrentlyFarming = false
end

function GUI:UpdateFarmStatus()
    if State.isCurrentlyFarming then
        self.StatusLabel.Text = "Status: Farming..."
        self.TimerLabel.Text = "Currently farming!"
    else
        local timeSinceLastUnlock = tick() - State.lastBaseUnlockTime
        local timeUntilNext = math.max(0, 10 - timeSinceLastUnlock)
        
        if timeUntilNext > 0 then
            self.StatusLabel.Text = "Status: Waiting for base unlock..."
            self.TimerLabel.Text = string.format("Next farm in: %.1fs", timeUntilNext)
        else
            self.StatusLabel.Text = "Status: Ready to farm!"
            self.TimerLabel.Text = "Waiting for base unlock..."
        end
    end
end

function GUI:CheckForBaseUnlock()
    -- This function should be customized based on your specific game
    -- For now, it's a placeholder that simulates base unlocking
    
    local timeSinceLastUnlock = tick() - State.lastBaseUnlockTime
    
    -- Check if 10 seconds have passed since last unlock
    if timeSinceLastUnlock >= 10 and not State.isCurrentlyFarming then
        -- Simulate base unlock detection
        if self:DetectBaseUnlock() then
            State.lastBaseUnlockTime = tick()
            self:ExecuteFarmSequence()
        end
    end
end

function GUI:DetectBaseUnlock()
    -- Placeholder for base unlock detection
    -- You'll need to implement this based on your specific game mechanics
    -- For example, checking for specific GUI elements, sounds, or game events
    
    -- Simulate random base unlock for demo
    return math.random(1, 100) <= 2 -- 2% chance per frame
end

function GUI:ExecuteFarmSequence()
    if State.isCurrentlyFarming then return end
    
    State.isCurrentlyFarming = true
    self.StatusLabel.Text = "Status: Starting farm sequence..."
    
    spawn(function()
        -- Step 1: Slow tween to enemy base
        self:TweenToEnemyBase()
        wait(2) -- Wait for tween to complete
        
        -- Step 2: Find and grab closest Brainrot
        self:GrabClosestBrainrot()
        wait(1) -- Wait for grab action
        
        -- Step 3: Tween back to player base
        self:TweenToPlayerBase()
        wait(2) -- Wait for return tween
        
        -- Farm sequence complete
        State.isCurrentlyFarming = false
        self.StatusLabel.Text = "Status: Farm complete! Waiting..."
    end)
end

function GUI:TweenToEnemyBase()
    local character = Player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    -- Find enemy base (customize based on your game)
    local enemyBase = self:FindEnemyBase()
    if not enemyBase then 
        print("No enemy base found!")
        return 
    end
    
    local humanoidRootPart = character.HumanoidRootPart
    local targetPosition = enemyBase.Position + Vector3.new(0, 5, 0)
    
    -- Create slow tween
    local tweenInfo = TweenInfo.new(
        2, -- Duration
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {
        CFrame = CFrame.new(targetPosition)
    })
    
    tween:Play()
    self.StatusLabel.Text = "Status: Moving to enemy base..."
end

function GUI:GrabClosestBrainrot()
    self.StatusLabel.Text = "Status: Grabbing Brainrot..."
    
    -- Find closest Brainrot (customize based on your game)
    local brainrot = self:FindClosestBrainrot()
    if brainrot then
        -- Simulate holding E key
        game:GetService("VirtualInputManager"):SendKeyEvent(true, "E", false, game)
        wait(0.1)
        game:GetService("VirtualInputManager"):SendKeyEvent(false, "E", false, game)
        print("Grabbed Brainrot!")
    else
        print("No Brainrot found!")
    end
end

function GUI:TweenToPlayerBase()
    local character = Player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    -- Find player base (customize based on your game)
    local playerBase = self:FindPlayerBase()
    if not playerBase then 
        print("No player base found!")
        return 
    end
    
    local humanoidRootPart = character.HumanoidRootPart
    local targetPosition = playerBase.Position + Vector3.new(0, 5, 0)
    
    -- Create return tween
    local tweenInfo = TweenInfo.new(
        2, -- Duration
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, {
        CFrame = CFrame.new(targetPosition)
    })
    
    tween:Play()
    self.StatusLabel.Text = "Status: Returning to base..."
end

-- Helper functions (customize these based on your specific game)
function GUI:FindEnemyBase()
    -- Placeholder - customize based on your game's base detection
    -- Look for specific part names, models, or GUI elements
    return workspace:FindFirstChild("EnemyBase") or Vector3.new(100, 0, 100)
end

function GUI:FindPlayerBase()
    -- Placeholder - customize based on your game's base detection
    return workspace:FindFirstChild("PlayerBase") or Player.Character and Player.Character.HumanoidRootPart.Position or Vector3.new(0, 0, 0)
end

function GUI:FindClosestBrainrot()
    -- Placeholder - customize based on your game's Brainrot detection
    -- Look for specific part names, models, or collectible items
    local brainrots = {}
    for _, obj in pairs(workspace:GetChildren()) do
        if obj.Name:lower():find("brainrot") then
            table.insert(brainrots, obj)
        end
    end
    
    if #brainrots > 0 then
        -- Return closest one (simplified)
        return brainrots[1]
    end
    
    return nil
end

-- Initialize GUI
function GUI:Init()
    State.lastBaseUnlockTime = tick()
    self:CreateMain()
    print("Auto Farm GUI loaded!")
    print("Features:")
    print("- Auto farm every 10 seconds after base unlock")
    print("- Slow tween to enemy base")
    print("- Grab closest Brainrot (hold E)")
    print("- Tween back to player base")
    print("- Mobile support with EVR toggle")
end

-- Initialize the GUI
GUI:Init()

return GUI
